name: Build and Deploy to Azure VM

on:
  push:
    branches:
      - main

jobs:
  build-gradle:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'
        
    - name: Add Execution Permission to gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build -DskipTests
      id: gradle

  build-docker:
    needs: build-gradle
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Build and Publish Docker Image
      run: |
        docker build -t my-spring-app .
        docker save my-spring-app:latest | gzip > my-spring-app.tar.gz
        echo "::set-output name=image_path::my-spring-app.tar.gz"
      id: docker

  deploy:
    needs: build-docker
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Download Docker Image Artifact
      uses: actions/download-artifact@v2
      with:
        name: my-spring-app
        path: /tmp

    - name: Copy Docker Image to Azure VM
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AZURE_VM_IP }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
        script: |
          scp -i /path/to/private/key /tmp/my-spring-app.tar.gz ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }}:/path/on/azure/vm

    - name: SSH into Azure VM and Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AZURE_VM_IP }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
        script: |
          cd /path/on/azure/vm
          gzip -d my-spring-app.tar.gz
          docker load -i my-spring-app.tar

          # Stop and remove any existing container with the same name
          docker stop my-spring-app || true
          docker rm my-spring-app || true

          # Run the Docker container in detached mode (-d) on port 8080
          docker run -d -p 8080:8080 --name my-spring-app my-spring-app:latest

          # Add any additional commands or checks needed after deployment
          # For example, you might want to add a sleep command to wait for the application to fully start
          sleep 10
          # Additional commands can be added based on your application requirements
